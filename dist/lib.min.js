"use strict";function e(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}Object.defineProperty(exports,"__esModule",{value:!0});var t=e(require("node-fetch"));async function s(e,s,r,a){const n=`https://api.steampowered.com/${e}/${s}/${r}?${a}`,i=await t.default(n);if(200!==i.status){const e=new Error(o(await i.text()));throw e.name=`${i.status}, ${i.statusText}`,e}return i.json()}const r=/\n/g,a=/(?:<\/?pre>)|(?:<\/?\w+>(?=<|$))/g,n=/(?<=\/?\w+>[^>]*)<\/?\w+>/g,i=/^<\/?\w+>/,o=e=>e.replace(r,"").replace(a,"").replace(n,", ").replace(i,"");async function c(e,t){var s=`steamid=${e}`;void 0!==t&&(s+=`&count=${t}`);const{response:r}=await this.api_call("IPlayerService","GetRecentlyPlayedGames","v1",s);if(void 0===r)throw new Error("GetRecentlyPlayedGames: response is undefined!");return r.games}async function l(e,t){var s=`steamid=${e}`;t&&(s+=function(e){var t="";const{include_appinfo:s,include_played_free_games:r,appids_filter:a,include_free_sub:n,skip_unvetted_apps:i}=e;return void 0!==s&&(t+=`&include_appinfo=${s}`),void 0!==r&&(t+=`&include_played_free_games=${r}`),void 0!==a&&(t+=`&appids_filter=${a.join(",")}`),void 0!==n&&(t+=`&include_free_sub=${n}`),void 0!==i&&(t+=`&skip_unvetted_apps=${i}`),t}(t));const{response:r}=await this.api_call("IPlayerService","GetOwnedGames","v1",s);if(void 0===r)throw new Error("GetOwnedGames: response is undefined!");return r.games}async function u(e){const t=`steamid=${e}`,{response:s}=await this.api_call("IPlayerService","GetSteamLevel","v1",t);if(void 0===s)throw new Error("GetSteamLevel: response is undefined!");return s.player_level}async function d(e){const t=`steamid=${e}`,{response:s}=await this.api_call("IPlayerService","GetBadges","v1",t);if(void 0===s)throw new Error("GetBadges: response is undefined!");return s}async function p(e){const t=`steamid=${e}`,{response:s}=await this.api_call("IPlayerService","GetCommunityBadgeProgress","v1",t);if(void 0===s)throw new Error("GetCommunityBadgeProgress: response is undefined!");return s.quests}async function m(e,t){var s=`steamid=${e}`;t&&(s+=`&relationship=${t}`);return(await this.api_call("ISteamUser","GetFriendList","v1",s)).friendslist.friends}async function f(e){const t=`steamids=${e.join(",")}`;return(await this.api_call("ISteamUser","GetPlayerBans","v1",t)).players}async function h(e){const t=`steamids=${e.join(",")}`,{response:s}=await this.api_call("ISteamUser","GetPlayerSummaries","v2",t);if(void 0===s)throw new Error("GetPlayerSummaries: response is undefined!");return s.players}async function v(e){const{response:t}=await this.api_call("ISteamUser","GetUserGroupList","v1",`steamid=${e}`);if(void 0===t)throw new Error("GetUserGroupList: response is undefined!");return t.groups}async function y(e){const{response:t}=await this.api_call("ISteamUser","ResolveVanityURL","v1",`vanityurl=${e}`);if(void 0===t)throw new Error("ResolveVanityUrl: response is undefined!");if(1!==t.success)throw new Error(`ResolveVanityUrl ${t.success}: ${t}`);return t.steamid}async function G(e,t){const s=`steamid=${e}&appid=${t}`,{playerstats:r}=await this.api_call("ISteamUserStats","GetPlayerAchievements","v1",s);if(!r.success)throw new Error(`GetPlayerAchievements: ${r.error}`);return r}async function w(e,t){var s=`appid=${e}`;t&&(s+=`&l=${t}`);const{game:r}=await this.api_call("ISteamUserStats","GetSchemaForGame","v2",s);return r}async function $(e,t){const s=`steamid=${e}&appid=${t}`,{playerstats:r}=await this.api_call("ISteamUserStats","GetUserStatsForGame","v2",s);if(void 0===r)throw new Error("GetUserStatsForGame: playerstats is undefined!");return r}const _=/(?<=]);\s*var rgChangingGames/;exports.GetGlobalAchievementPercentagesForApp=async function(e){const t=`gameid=${e}`,{response:r}=await s("ISteamUserStats","GetGlobalAchievementPercentagesForApp","v2",t);if(void 0===r)throw new Error("GetGlobalAchievementPercentagesForApp: response is undefined!");return r.achievementpercentages.achievements},exports.GetNumberOfCurrentPlayers=async function(e){const{response:t}=await s("ISteamUserStats","GetNumberOfCurrentPlayers","v1",`appid=${e}`);if(void 0===t)throw new Error("GetNumberOfCurrentPlayers: response is undefined!");return t},exports.GetScrapedGames=async function(e){const s=await t.default(`${e}/games/?tab=all`).then((e=>e.text())),r=s.indexOf("var rgGames = ")+"var rgGames = ".length,a=s.search(_),n=s.slice(r,a);return JSON.parse(n)},exports.steam_session=class{constructor(e){this.GetRecentlyPlayedGames=c,this.GetOwnedGames=l,this.GetSteamLevel=u,this.GetBadges=d,this.GetCommunityBadgeProgress=p,this.GetFriendList=m,this.GetPlayerBans=f,this.GetPlayerSummaries=h,this.GetUserGroupList=v,this.ResolveVanityURL=y,this.GetPlayerAchievements=G,this.GetSchemaForGame=w,this.GetUserStatsForGame=$,this.key=(e=>{const t=Buffer.from(e,"hex");if(t.toString("hex").toLowerCase()!==e.toLowerCase())throw new Error(`Could not parse '${e}' as hex!`);if(16!==t.byteLength)throw new Error("The API key should be a 32 character hex string or 16 bytes!");return e})(e)}api_call(e,t,r,a){return s(e,t,r,`key=${this.key}&${a}`)}};
//# sourceMappingURL=lib.min.js.map
