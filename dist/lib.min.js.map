{"version":3,"file":"lib.min.js","sources":["../src/api/api_call.ts","../src/IPlayerService/GetRecentlyPlayedGames/index.ts","../src/IPlayerService/index.ts","../src/IPlayerService/GetOwnedGames/index.ts","../src/IPlayerService/GetOwnedGames/options.ts","../src/IPlayerService/GetSteamLevel/index.ts","../src/IPlayerService/GetBadges/index.ts","../src/IPlayerService/GetCommunityBadgeProgress/index.ts","../src/ISteamUser/GetFriendList/index.ts","../src/ISteamUser/index.ts","../src/ISteamUser/GetPlayerBans/index.ts","../src/ISteamUser/GetPlayerSummaries/index.ts","../src/ISteamUser/GetUserGroupList/index.ts","../src/ISteamUser/ResolveVanityURL/index.ts","../src/ISteamUser/ResolveVanityURL/res.ts","../src/ISteamUserStats/GetPlayerAchievements/index.ts","../src/ISteamUserStats/index.ts","../src/ISteamUserStats/GetPlayerAchievements/res.ts","../src/ISteamUserStats/GetSchemaForGame/index.ts","../src/ISteamUserStats/GetUserStatsForGame/index.ts","../src/Web/GetScrapedGames.ts","../src/ISteamUserStats/GetGlobalAchievementPercentagesForApp/index.ts","../src/ISteamUserStats/GetNumberOfCurrentPlayers/index.ts","../src/steam_session.ts","../src/api/api_key.ts"],"sourcesContent":["import fetch from \"node-fetch\";\n\nimport {api_interface} from \"./api_interface\";\nimport {api_method} from \"./api_method\";\nimport {api_version} from \"./api_version\";\n\nconst host = \"api.steampowered.com\";\n\nasync function api_call<T>\n(int: api_interface, met: api_method, ver: api_version, params: string): Promise<T>\n{\n   const url = `https://${host}/${int}/${met}/${ver}?${params}`;\n   const res = await fetch(url);\n   if (res.status !== 200) {\n      const err = new Error(render_html(await res.text()));\n      err.name = `${res.status}, ${res.statusText}`;\n      throw err;\n   }\n\n   return res.json();\n}\n\nexport {api_call};\n\nconst newline = /\\n/g;\n/**\n * Match any <pre> or </pre>\n * Match any html tag who's innerHTML begins with another html tag or EOF\n */\nconst pre_or_useless_html_tags = /(?:<\\/?pre>)|(?:<\\/?\\w+>(?=<|$))/g;\nconst html_tags_except_first = /(?<=\\/?\\w+>[^>]*)<\\/?\\w+>/g;\nconst first_tag = /^<\\/?\\w+>/;\n\n// https://stackoverflow.com/questions/1732348\nconst render_html = (html: string) =>\n   html\n      .replace(newline, \"\")\n      .replace(pre_or_useless_html_tags, \"\")\n      .replace(html_tags_except_first, \", \")\n      .replace(first_tag, \"\");\n","import {steam_session} from \"../../steam_session\";\nimport {steam_id} from \"../../shared/steam_id\";\nimport {uint} from \"../../core/numerals\";\n\nimport {IPlayerService} from \"..\";\nimport {api_method} from \"../../api/api_method\";\nconst method = \"GetRecentlyPlayedGames\" as api_method;\n\nasync function GetRecentlyPlayedGames(this: steam_session, user: steam_id, count?: uint) {\n   var params = `steamid=${user}`;\n   if (count !== undefined) {\n      params += `&count=${count}`;\n   }\n\n   const {response} = await this.api_call<import(\"./res\")>(\n      IPlayerService,\n      method,\n      \"v1\",\n      params\n   );\n\n   if (response === undefined) {\n      throw new Error(\"GetRecentlyPlayedGames: response is undefined!\");\n   }\n\n   return response.games;\n}\n\nexport {GetRecentlyPlayedGames};\n","import {api_interface} from \"../api/api_interface\";\n\nexport const IPlayerService: api_interface = \"IPlayerService\";\n","// function params\nimport {steam_session} from \"../../steam_session\";\nimport {steam_id} from \"../../shared/steam_id\";\nimport {GetOwnedGames_options} from \"./options\";\n\n// function return\nimport {owned_game} from \"./owned_game\";\nimport {owned_game_ex} from \"./owned_game_ex\";\n\n// stuff used inside the function\nimport {IPlayerService} from \"..\";\nimport {opts_to_params} from \"./options\";\nimport {api_method} from \"../../api/api_method\";\nconst method = \"GetOwnedGames\" as api_method;\n\nfunction GetOwnedGames(user: steam_id):\nPromise<owned_game[]>;\n\nfunction GetOwnedGames(\n   user: steam_id,\n   opts: GetOwnedGames_options & {include_appinfo?: false},\n):\nPromise<owned_game[]>;\n\nfunction GetOwnedGames(\n   user: steam_id,\n   opts: GetOwnedGames_options & {include_appinfo: true},\n):\nPromise<owned_game_ex[]>;\n\nasync function GetOwnedGames(this: steam_session, user: steam_id, opts?: GetOwnedGames_options):\nPromise<(owned_game | owned_game_ex)[]>\n{\n   var params = `steamid=${user}`;\n\n   if (opts) {\n      params += opts_to_params(opts);\n   }\n\n   const {response} = await this.api_call<import(\"./res\")>(\n      IPlayerService,\n      method,\n      \"v1\",\n      params\n   );\n\n   if (response === undefined) {\n      throw new Error(\"GetOwnedGames: response is undefined!\");\n   }\n\n   return response.games;\n}\n\nexport {GetOwnedGames};\n","import {app_id} from \"../../shared/app_id\";\n\nexport type GetOwnedGames_options = {\n   /** @default false */\n   include_appinfo?: boolean;\n   /** @default false */\n   include_played_free_games?: boolean;\n   /** @default [] */\n   appids_filter?: app_id[];\n   /** @default false */\n   include_free_sub?: boolean;\n   /** @default false */\n   skip_unvetted_apps?: boolean;\n};\n\n/**\n * This is not actually used.\n * This is a representation of how what Steam will interpret missing parameters\n * as.\n */\nexport const GetOwnedGames_options_default: GetOwnedGames_options = {\n   include_appinfo: false,\n   include_played_free_games: false,\n   appids_filter: [],\n   include_free_sub: false,\n   skip_unvetted_apps: false,\n};\n\nexport function opts_to_params(opts: GetOwnedGames_options): string {\n   var params = \"\";\n\n   const {\n      include_appinfo,\n      include_played_free_games,\n      appids_filter,\n      include_free_sub,\n      skip_unvetted_apps,\n   } = opts;\n\n   if (include_appinfo !== undefined) {\n      params += `&include_appinfo=${include_appinfo}`;\n   }\n\n   if (include_played_free_games !== undefined) {\n      params += `&include_played_free_games=${include_played_free_games}`;\n   }\n\n   if (appids_filter !== undefined) {\n      params += `&appids_filter=${appids_filter.join(',')}`;\n   }\n\n   if (include_free_sub !== undefined) {\n      params += `&include_free_sub=${include_free_sub}`;\n   }\n\n   if (skip_unvetted_apps !== undefined) {\n      params += `&skip_unvetted_apps=${skip_unvetted_apps}`;\n   }\n\n   return params;\n}\n","import {steam_session} from \"../../steam_session\";\nimport {steam_id} from \"../../shared/steam_id\";\n\nimport {IPlayerService} from \"..\";\nimport {api_method} from \"../../api/api_method\";\n\nconst method = \"GetSteamLevel\" as api_method;\nasync function GetSteamLevel(this: steam_session, user: steam_id) {\n   const params = `steamid=${user}`;\n\n   const {response} = await this.api_call<import(\"./res\")>(\n      IPlayerService,\n      method,\n      \"v1\",\n      params\n   );\n\n   if (response === undefined) {\n      throw new Error(\"GetSteamLevel: response is undefined!\");\n   }\n\n   return response.player_level;\n}\n\nexport {GetSteamLevel};\n","import {steam_session} from \"../../steam_session\";\nimport {steam_id} from \"../../shared/steam_id\";\n\nimport {IPlayerService} from \"..\";\nimport {api_method} from \"../../api/api_method\";\nconst method = \"GetBadges\" as api_method;\n\nasync function GetBadges(this: steam_session, user: steam_id) {\n   const params = `steamid=${user}`;\n\n   const {response} = await this.api_call<import(\"./res\")>(\n      IPlayerService,\n      method,\n      \"v1\",\n      params,\n   );\n\n   if (response === undefined) {\n      throw new Error(\"GetBadges: response is undefined!\");\n   }\n\n   return response;\n}\n\nexport {GetBadges};\n","import {steam_session} from \"../../steam_session\";\nimport {steam_id} from \"../../shared/steam_id\";\n\nimport {IPlayerService} from \"..\";\nimport {api_method} from \"../../api/api_method\";\nconst method = \"GetCommunityBadgeProgress\" as api_method;\n\nasync function GetCommunityBadgeProgress(this: steam_session, user: steam_id) {\n   const params = `steamid=${user}`;\n\n   const {response} = await this.api_call<import(\"./res\")>(\n      IPlayerService,\n      method,\n      \"v1\",\n      params,\n   );\n\n   if (response === undefined) {\n      throw new Error(\"GetCommunityBadgeProgress: response is undefined!\");\n   }\n\n   return response.quests;\n}\n\nexport {GetCommunityBadgeProgress};\n","import {steam_session} from \"../../steam_session\";\nimport {steam_id} from \"../../shared/steam_id\";\nimport {user_relationship} from \"./user_relationship\";\n\nimport {ISteamUser} from \"..\";\nimport {api_method} from \"../../api/api_method\";\nconst method = \"GetFriendList\" as api_method;\n\nasync function GetFriendList(this: steam_session, user: steam_id, relationship?: user_relationship) {\n   var params = `steamid=${user}`;\n\n   if (relationship) {\n      params += `&relationship=${relationship}`;\n   }\n\n   const res = await this.api_call<import(\"./res\")>(\n      ISteamUser,\n      method,\n      \"v1\",\n      params,\n   );\n\n   // 500s on error so we don't have to check, I think\n\n   return res.friendslist.friends;\n}\n\nexport {GetFriendList};\n","import {api_interface} from \"../api/api_interface\";\n\nexport const ISteamUser: api_interface = \"ISteamUser\";\n","import {steam_session} from \"../../steam_session\";\nimport {steam_id} from \"../../shared/steam_id\";\n\nimport {ISteamUser} from \"..\";\nimport {api_method} from \"../../api/api_method\";\nconst method = \"GetPlayerBans\" as api_method;\n\nasync function GetPlayerBans(this: steam_session, users: steam_id[]) {\n   const params = `steamids=${users.join(',')}`;\n\n   const res = await this.api_call<import(\"./res\")>(\n      ISteamUser,\n      method,\n      \"v1\",\n      params,\n   );\n\n   return res.players;\n}\n\nexport {GetPlayerBans};\n","import {steam_session} from \"../../steam_session\";\nimport {steam_id} from \"../../shared/steam_id\";\n\nimport {ISteamUser} from \"..\";\nimport {api_method} from \"../../api/api_method\";\nconst method = \"GetPlayerSummaries\" as api_method;\n\nasync function GetPlayerSummaries(this: steam_session, users: steam_id[]) {\n   const params = `steamids=${users.join(',')}`;\n\n   const {response} = await this.api_call<import(\"./res\")>(\n      ISteamUser,\n      method,\n      \"v2\",\n      params,\n   );\n\n   if (response === undefined) {\n      throw new Error(\"GetPlayerSummaries: response is undefined!\");\n   }\n\n   return response.players;\n}\n\nexport {GetPlayerSummaries};\n","import {steam_session} from \"../../steam_session\";\nimport {steam_id} from \"../../shared/steam_id\";\n\nimport {ISteamUser} from \"..\";\nimport {api_method} from \"../../api/api_method\";\nconst method = \"GetUserGroupList\" as api_method;\n\nasync function GetUserGroupList(this: steam_session, user: steam_id) {\n   const {response} = await this.api_call<import(\"./res\")>(\n      ISteamUser,\n      method,\n      \"v1\",\n      `steamid=${user}`\n   );\n\n   if (response === undefined) {\n      throw new Error(\"GetUserGroupList: response is undefined!\");\n   }\n\n   return response.groups;\n}\n\nexport {GetUserGroupList};\n","import {steam_session} from \"../../steam_session\";\n\nimport {ISteamUser} from \"..\";\nimport {api_method} from \"../../api/api_method\";\nimport {res, is_err} from \"./res\";\n\nconst method = \"ResolveVanityURL\" as api_method;\n\nasync function ResolveVanityURL(this: steam_session, vanity_url: string) {\n   const {response} = await this.api_call<res>(\n      ISteamUser,\n      method,\n      \"v1\",\n      `vanityurl=${vanity_url}`,\n   );\n\n   if (response === undefined) {\n      throw new Error(\"ResolveVanityUrl: response is undefined!\");\n   }\n\n   if (is_err(response)) {\n      throw new Error(`ResolveVanityUrl ${response.success}: ${response}`);\n   }\n\n   return response.steamid;\n}\n\nexport {ResolveVanityURL};\n","import {o_response} from \"../../shared/o_response\";\nimport {steam_id} from \"../../shared/steam_id\";\n\ntype err = {\n   success: number,\n   message: string;\n};\n\ntype ok = {\n   steamid: steam_id;\n   success: 1;\n};\n\nexport type res = o_response<ok | err>;\n\nexport const is_err = (res: ok | err): res is err => res.success !== 1;\n","import {steam_session} from \"../../steam_session\";\nimport {steam_id} from \"../../shared/steam_id\";\nimport {app_id} from \"../../shared/app_id\";\n\nimport {ISteamUserStats} from \"..\";\nimport {api_method} from \"../../api/api_method\";\nimport {res, is_err} from \"./res\";\nconst method = \"GetPlayerAchievements\" as api_method;\n\n// the API has another parameter `l` but I'm pretty sure it does nothing\nasync function GetPlayerAchievements(this: steam_session, user: steam_id, game_id: app_id) {\n   const params = `steamid=${user}&appid=${game_id}`;\n\n   const {playerstats} = await this.api_call<res>(\n      ISteamUserStats,\n      method,\n      \"v1\",\n      params\n   );\n\n   if (is_err(playerstats)) {\n      throw new Error(`GetPlayerAchievements: ${playerstats.error}`);\n   }\n\n   return playerstats;\n}\n\nexport {GetPlayerAchievements};\n","import {api_interface} from \"../api/api_interface\";\n\nexport const ISteamUserStats: api_interface = \"ISteamUserStats\";\n","import {steam_id} from \"../../shared/steam_id\";\nimport {user_achievement_unlock} from \"./user_achievement_unlock\";\n\ntype ok = {\n   gameName: string;\n   steamID: steam_id;\n   achievements: user_achievement_unlock[];\n   success: true;\n};\n\ntype err = {\n   error: string;\n   success: false;\n};\n\nexport type res = {playerstats: ok | err};\n\nexport const is_err = (res: ok | err): res is err => !res.success;\n","import {steam_session} from \"../../steam_session\";\nimport {app_id} from \"../../shared/app_id\";\nimport {l10n} from \"./l10n\";\n\nimport {ISteamUserStats} from \"..\";\nimport {api_method} from \"../../api/api_method\";\nconst method = \"GetSchemaForGame\" as api_method;\n\nasync function GetSchemaForGame(this: steam_session, game_id: app_id, localization?: l10n) {\n   var params = `appid=${game_id}`;\n\n   if (localization) {\n      params += `&l=${localization}`;\n   }\n\n   const {game} = await this.api_call<import(\"./res\")>(\n      ISteamUserStats,\n      method,\n      \"v2\",\n      params\n   );\n\n   return game;\n}\n\nexport {GetSchemaForGame};\n","import {steam_session} from \"../../steam_session\";\nimport {steam_id} from \"../../shared/steam_id\";\nimport {app_id} from \"../../shared/app_id\";\n\nimport {ISteamUserStats} from \"..\";\nimport {api_method} from \"../../api/api_method\";\nconst method = \"GetUserStatsForGame\" as api_method;\n\nasync function GetUserStatsForGame(this: steam_session, user: steam_id, game_id: app_id) {\n   const params = `steamid=${user}&appid=${game_id}`;\n\n   const {playerstats} = await this.api_call<import(\"./res\")>(\n      ISteamUserStats,\n      method,\n      \"v2\",\n      params,\n   );\n\n   if (playerstats === undefined) {\n      throw new Error(\"GetUserStatsForGame: playerstats is undefined!\");\n   }\n\n   return playerstats;\n}\n\nexport {GetUserStatsForGame};\n","import fetch from \"node-fetch\";\n\nimport {user_url} from \"../shared/user_url\";\nimport {scraped_game} from \"./scraped_game\";\n\nconst RG_GAMES_0 = \"var rgGames = \";\nconst RG_GAMES_1 = /(?<=]);\\s*var rgChangingGames/;\n\nasync function GetScrapedGames(profile: user_url): Promise<scraped_game[]> {\n   const html = await fetch(`${profile}/games/?tab=all`).then(res => res.text());\n   const games_beg = html.indexOf(RG_GAMES_0) + RG_GAMES_0.length;\n   const games_end = html.search(RG_GAMES_1);\n   const games_dat = html.slice(games_beg, games_end);\n   return JSON.parse(games_dat);\n}\n\nexport {GetScrapedGames};\n","import {app_id} from \"../../shared/app_id\";\n\nimport {ISteamUserStats} from \"..\";\nimport {api_call} from \"../../api/api_call\";\nimport {api_method} from \"../../api/api_method\";\n\nconst method = \"GetGlobalAchievementPercentagesForApp\" as api_method;\n\nasync function GetGlobalAchievementPercentagesForApp(game_id: app_id) {\n   const params = `gameid=${game_id}`;\n\n   const {response} = await api_call<import(\"./res\")>(\n      ISteamUserStats,\n      method,\n      \"v2\",\n      params,\n   );\n\n   if (response === undefined) {\n      throw new Error(\"GetGlobalAchievementPercentagesForApp: response is undefined!\");\n   }\n\n   return response.achievementpercentages.achievements;\n}\n\nexport {GetGlobalAchievementPercentagesForApp};\n","import {app_id} from \"../../shared/app_id\";\n\nimport {api_call} from \"../../api/api_call\";\nimport {ISteamUserStats} from \"..\";\nimport {api_method} from \"../../api/api_method\";\n\nconst method = \"GetNumberOfCurrentPlayers\" as api_method;\n\nasync function GetNumberOfCurrentPlayers(app_id: app_id) {\n   const {response} = await api_call<import(\"./res\")>(\n      ISteamUserStats,\n      method,\n      \"v1\",\n      `appid=${app_id}`,\n   );\n\n   if (response === undefined) {\n      throw new Error(\"GetNumberOfCurrentPlayers: response is undefined!\");\n   }\n\n   return response;\n}\n\nexport {GetNumberOfCurrentPlayers};\n","import {api_key, to_api_key} from \"./api/api_key\";\nimport {api_call} from \"./api/api_call\";\nimport {api_interface} from \"./api/api_interface\";\nimport {api_method} from \"./api/api_method\";\nimport {api_version} from \"./api/api_version\";\n\n// IPlayerService\nimport {GetRecentlyPlayedGames} from \"./IPlayerService/GetRecentlyPlayedGames\";\nimport {GetOwnedGames} from \"./IPlayerService/GetOwnedGames\";\nimport {GetSteamLevel} from \"./IPlayerService/GetSteamLevel\";\nimport {GetBadges} from \"./IPlayerService/GetBadges\";\nimport {GetCommunityBadgeProgress} from \"./IPlayerService/GetCommunityBadgeProgress\";\n\n// ISteamUser\nimport {GetFriendList} from \"./ISteamUser/GetFriendList\";\nimport {GetPlayerBans} from \"./ISteamUser/GetPlayerBans\";\nimport {GetPlayerSummaries} from \"./ISteamUser/GetPlayerSummaries\";\nimport {GetUserGroupList} from \"./ISteamUser/GetUserGroupList\";\nimport {ResolveVanityURL} from \"./ISteamUser/ResolveVanityURL\";\n\n// ISteamUserStats\nimport {GetPlayerAchievements} from \"./ISteamUserStats/GetPlayerAchievements\";\nimport {GetSchemaForGame} from \"./ISteamUserStats/GetSchemaForGame\";\nimport {GetUserStatsForGame} from \"./ISteamUserStats/GetUserStatsForGame\";\n\nexport class steam_session {\n   key: api_key;\n\n   constructor (key: string) {\n      this.key = to_api_key(key);\n   }\n\n   api_call<T>(\n      int: api_interface,\n      met: api_method,\n      ver: api_version,\n      params: string\n   ) {\n      return api_call<T>(int, met, ver, `key=${this.key}&${params}`);\n   };\n\n   // IPlayerService\n   GetRecentlyPlayedGames=\n   GetRecentlyPlayedGames;\n   GetOwnedGames=\n   GetOwnedGames;\n   GetSteamLevel=\n   GetSteamLevel;\n   GetBadges=\n   GetBadges;\n   GetCommunityBadgeProgress=\n   GetCommunityBadgeProgress;\n\n   // ISteamUser\n   GetFriendList=\n   GetFriendList;\n   GetPlayerBans=\n   GetPlayerBans;\n   GetPlayerSummaries=\n   GetPlayerSummaries;\n   GetUserGroupList=\n   GetUserGroupList;\n   ResolveVanityURL=\n   ResolveVanityURL;\n\n   // ISteamUserStats\n   GetPlayerAchievements=\n   GetPlayerAchievements;\n   GetSchemaForGame=\n   GetSchemaForGame;\n   GetUserStatsForGame=\n   GetUserStatsForGame;\n}\n","declare const api_key: unique symbol;\nexport type api_key = string & {readonly [api_key]: void};\nexport const to_api_key = (s: string) => {\n   const buf = Buffer.from(s, \"hex\");\n\n   if (buf.toString(\"hex\") !== s) {\n      throw new Error(`Could not parse '${s}' as hex!`);\n   }\n\n   if (buf.byteLength !== 16) {\n      throw new Error(\"The API key should be a 32 character hex string or 16 bytes!\");\n   }\n\n   return s as api_key;\n};\n"],"names":["async","api_call","int","met","ver","params","url","res","fetch","status","err","Error","render_html","text","name","statusText","json","newline","pre_or_useless_html_tags","html_tags_except_first","first_tag","html","replace","GetRecentlyPlayedGames","user","count","undefined","response","this","games","GetOwnedGames","opts","include_appinfo","include_played_free_games","appids_filter","include_free_sub","skip_unvetted_apps","join","opts_to_params","GetSteamLevel","player_level","GetBadges","GetCommunityBadgeProgress","quests","GetFriendList","relationship","friendslist","friends","GetPlayerBans","users","players","GetPlayerSummaries","GetUserGroupList","groups","ResolveVanityURL","vanity_url","success","steamid","GetPlayerAchievements","game_id","playerstats","error","GetSchemaForGame","localization","game","GetUserStatsForGame","RG_GAMES_1","achievementpercentages","achievements","app_id","profile","then","games_beg","indexOf","length","games_end","search","games_dat","slice","JSON","parse","[object Object]","key","s","buf","Buffer","from","toString","byteLength","to_api_key"],"mappings":"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"}